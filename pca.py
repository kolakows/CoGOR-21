# -*- coding: utf-8 -*-
"""pca.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11SeXRa_Orj3NzoY4wPmQhV5Gyl-bM7jm
"""

# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive
drive.mount('/gdrive')
# %cd /gdrive/MyDrive/bhl

import pandas as pd
import numpy as np

df = pd.read_csv('data_nona.csv')
df = df.drop(['subject', 'void()'], axis=1)
df = df.assign(ActivityType=np.where((df['Activity'] == "STANDING") | (df['Activity'] == "SITTING") | (df['Activity'] == "LAYING"), 'IDLE', 'MOVING'))
df

df.groupby('Activity').size().plot.bar()

# calculate important components, lambda > 1
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from sklearn.decomposition import PCA

train_columns= df.columns.difference(['Activity', 'ActivityType'])
df_fe_train = df[train_columns].copy()

pca = PCA()
pca.fit(df_fe_train)
pca_fe = pca.transform(df_fe_train)
components = sum(pca.explained_variance_ > 1)

# calculate explained variance of two first principal components
import numpy as np
np.cumsum(pca.explained_variance_ratio_)

pca = PCA(components)
pca.fit(df_fe_train)
pca_fe = pca.transform(df_fe_train)

import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from sklearn.decomposition import PCA

train_columns= df.columns.difference(['Activity', 'ActivityType'])
df_fe_train = df[train_columns].copy()

pca = PCA(n_components = 2)
pca.fit(df_fe_train)
pca_fe = pca.transform(df_fe_train)
df_fe_train[['pca1','pca2']] = pd.DataFrame(pca_fe)
df_fe_train['ActivityType'] = df['ActivityType']
df_fe_train['Activity'] = df['Activity']

# shuffle and take only 10000 points from each activity
df_fe_limited = df_fe_train.sample(frac = 1)
df_fe_limited = df_fe_limited.groupby(['Activity', 'ActivityType']).head(10000)

import seaborn as sns
from google.colab import files
sns.set()

ax = sns.scatterplot(x='pca1', y = 'pca2', hue = 'Activity', data = df_fe_limited, alpha = 0.7, linewidth = 0)
fig = ax.get_figure()
fig.savefig("scatter_activity.png", dpi=300)
files.download("scatter_activity.png")

ax = sns.scatterplot(x='pca1', y = 'pca2', hue = 'ActivityType', data = df_fe_limited, alpha = 0.7, linewidth = 0)
fig = ax.get_figure()
fig.savefig("scatter_activitytype.png", dpi=300)
files.download("scatter_activitytype.png")

ax = sns.pairplot(df_fe_limited, vars=['pca1','pca2'], hue = 'Activity')
fig = ax.fig
fig.savefig("pairplot_activity.png", dpi=300)
files.download("pairplot_activity.png")

ax = sns.pairplot(df_fe_limited, vars=['pca1','pca2'], hue = 'ActivityType')
fig = ax.fig
fig.savefig("pairplot_activitytype.png", dpi=300)
files.download("pairplot_activitytype.png")

from numpy.linalg import norm

df_components = pd.DataFrame(pca.components_, index = ['pca1', 'pca2'], columns = train_columns).T
df_components['norm'] = df_components.apply(func = norm, axis = 1)
df_cmps_thresh = df_components[df_components['norm'] > 0.1].copy()

ar_c = len(df_cmps_thresh)     
colors = sns.color_palette('hls',ar_c)          
labels = df_cmps_thresh.index

plt.figure(figsize=(10,8))
for dx, dy, c, label in zip(df_cmps_thresh['pca1'], df_cmps_thresh['pca2'], colors, labels): 
  plt.arrow(0, 0, dx, dy, color = c, head_width = 0.02)
  plt.text(dx * 1.15, dy * 1.15, label, color = c,  ha = 'center', va = 'center')
plt.xlabel('pca1')
plt.ylabel('pca2')
plt.xlim(-0.75, 0.75)
plt.ylim(-0.75, 0.75)
plt.show()
#df_cmps_thresh